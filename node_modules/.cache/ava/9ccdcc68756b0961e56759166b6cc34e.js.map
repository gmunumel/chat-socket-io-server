{"version":3,"sources":["server.test.js"],"names":["describe","it","done","mockServer","on","server","emit","window","io","app","setTimeout","messageLen","messages","length","assert","equal","stop"],"mappings":";;AAAA;;AACA;;AAEA;AACA;;AAEA;;AAEAA,SAAS,kBAAT,EAA6B,MAAM;AACjCC,KAAG,YAAH,EAAkBC,IAAD,IAAU;AACzB,UAAMC,aAAa,uBAAW,uBAAX,CAAnB;AACAA,eAAWC,EAAX,CAAc,YAAd,EAA4BC,UAAU;AACpCF,iBAAWG,IAAX,CAAgB,UAAhB,EAA4B,gBAA5B;AACAH,iBAAWG,IAAX,CAAgB,UAAhB,EAA4B,gBAA5B;AACD,KAHD;;AAKA;;;;;;AAMAC,WAAOC,EAAP;;AAEA;AACA;AACA,QAAIC,MAAM,sBAAV;;AAEAC,eAAW,MAAM;AACf,YAAMC,aAAaF,IAAIG,QAAJ,CAAaC,MAAhC;AACAC,aAAOC,KAAP,CAAaJ,UAAb,EAAyB,CAAzB,EAA4B,uCAA5B;AACAR,iBAAWa,IAAX,CAAgBd,IAAhB;AACD,KAJD,EAIG,GAJH;AAKD,GAxBD;AAyBD,CA1BD","file":"server.test.js","sourcesContent":["import { SocketIO, Server } from 'mock-socket';\nimport { GoServer }         from '../server';\n\n// const Server   = require('mock-socket').Server;\n// const SocketIO = require('mock-socket').SocketIO;\n\n// const GoServer = require('../server').GoServer;\n\ndescribe('Server Unit Test', () => {\n  it('basic test', (done) => {\n    const mockServer = new Server('http://localhost:8080');\n    mockServer.on('connection', server => {\n      mockServer.emit('messages', 'test message 1');\n      mockServer.emit('messages', 'test message 2');\n    });\n\n    /*\n      This step is very important! It tells our chat app to use the mocked\n      websocket object instead of the native one. The great thing\n      about this is that our actual code did not need to change and\n      thus is agnostic to how we test it.\n    */\n    window.io = SocketIO;\n\n    // Now when Go Server tries to do io() or io.connect()\n    // it will use MockSocketIO object\n    var app = new GoServer();\n\n    setTimeout(() => {\n      const messageLen = app.messages.length;\n      assert.equal(messageLen, 2, '2 messages where sent from the server');\n      mockServer.stop(done);\n    }, 100);\n  });\n});"]}