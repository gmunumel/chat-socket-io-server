{"version":3,"sources":["server.test.js"],"names":["cb","t","mockServer","on","emit","window","io","app","setTimeout","messageLen","messages","length","is","stop","done","end"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAGA;AACA;;AAEA;;AAEA,cAAKA,EAAL,CAAQ,kBAAR,EAA4BC,KAAK;AAC/B;AACE,QAAMC,aAAa,uBAAW,uBAAX,CAAnB;AACAA,aAAWC,EAAX,CAAc,YAAd,EAA4B,MAAM;AAChCD,eAAWE,IAAX,CAAgB,UAAhB,EAA4B,gBAA5B;AACAF,eAAWE,IAAX,CAAgB,UAAhB,EAA4B,gBAA5B;AACD,GAHD;;AAMA;AACA;AACA;AACA;;AAEAC,SAAOC,EAAP;;AAEA;AACA;AACA,MAAIC,MAAM,sBAAV;;AAEAC,aAAW,MAAM;AACf,UAAMC,aAAaF,IAAIG,QAAJ,CAAaC,MAAhC;AACA;AACAV,MAAEW,EAAF,CAAKH,UAAL,EAAiB,CAAjB;AACAP,eAAWW,IAAX,CAAgBC,IAAhB;AACAb,MAAEc,GAAF;AACD,GAND,EAMG,GANH;AAOF;AACD,CA5BD;;AA8BA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"server.test.js","sourcesContent":["import test                 from 'ava';\nimport { SocketIO, Server } from 'mock-socket';\nimport { GoServer }         from '../server';\n\n\n// const Server   = require('mock-socket').Server;\n// const SocketIO = require('mock-socket').SocketIO;\n\n// const GoServer = require('../server').GoServer;\n\ntest.cb('Server Unit Test', t => {\n  // it('basic test', (done) => {\n    const mockServer = new Server('http://localhost:8080');\n    mockServer.on('connection', () => {\n      mockServer.emit('messages', 'test message 1');\n      mockServer.emit('messages', 'test message 2');\n    });\n\n    \n    // This step is very important! It tells our server app to use the mocked\n    // websocket object instead of the native one. The great thing\n    // about this is that our actual code did not need to change and\n    // thus is agnostic to how we test it.\n    \n    window.io = SocketIO;\n\n    // Now when Go Server tries to do io() or io.connect()\n    // it will use MockSocketIO object\n    var app = new GoServer();\n\n    setTimeout(() => {\n      const messageLen = app.messages.length;\n      // assert.equal(messageLen, 2, '2 messages where sent from the server');\n      t.is(messageLen, 2);\n      mockServer.stop(done);\n      t.end();\n    }, 100);\n  // });\n});\n\n// test.cb('a socket can emit to a room', t => {\n//   const server = new Server('ws://roomy');\n//   const socketFoo = SocketIO('ws://roomy');\n//   const socketBar = SocketIO('ws://roomy');\n\n//   var redis = require('redis-mock'),\n//         client = redis.createClient();\n\n//   socketFoo.on('connect', () => {\n//     socketFoo.join('room');\n//   });\n//   socketFoo.on('room-talk', () => {\n//     t.true(true);\n//     server.close();\n//     t.end();\n//   });\n\n//   socketBar.on('connect', () => {\n//     socketBar.join('room');\n//     socketBar.to('room').emit('room-talk');\n//   });\n// });\n\n"]}