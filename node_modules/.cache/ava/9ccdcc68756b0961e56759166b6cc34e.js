'use strict';

var _mockSocket = require('mock-socket');

var _server = require('../server');

// const Server   = require('mock-socket').Server;
// const SocketIO = require('mock-socket').SocketIO;

// const GoServer = require('../server').GoServer;

describe('Server Unit Test', () => {
  it('basic test', done => {
    const mockServer = new _mockSocket.Server('http://localhost:8080');
    mockServer.on('connection', server => {
      mockServer.emit('messages', 'test message 1');
      mockServer.emit('messages', 'test message 2');
    });

    /*
      This step is very important! It tells our chat app to use the mocked
      websocket object instead of the native one. The great thing
      about this is that our actual code did not need to change and
      thus is agnostic to how we test it.
    */
    window.io = _mockSocket.SocketIO;

    // Now when Go Server tries to do io() or io.connect()
    // it will use MockSocketIO object
    var app = new _server.GoServer();

    setTimeout(() => {
      const messageLen = app.messages.length;
      assert.equal(messageLen, 2, '2 messages where sent from the server');
      mockServer.stop(done);
    }, 100);
  });
});
//# sourceMappingURL=../node_modules/.cache/ava/9ccdcc68756b0961e56759166b6cc34e.js.map