{"version":3,"sources":["server.test.js"],"names":["redis","cb","t","server","socketFoo","socketBar","client","createClient","on","join","true","close","end","to","emit"],"mappings":";;;;AAAA;;;;AACA;;AACA;;IAAYA,K;;AACZ;;;;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAKC,EAAL,CAAQ,6BAAR,EAAuCC,KAAK;AAC1C,QAAMC,SAAS,uBAAW,YAAX,CAAf;AACA,QAAMC,YAAY,0BAAS,YAAT,CAAlB;AACA,QAAMC,YAAY,0BAAS,YAAT,CAAlB;;AAEA;AACA,MAAKC,SAASN,MAAMO,YAAN,EAAd;;AAEAH,YAAUI,EAAV,CAAa,SAAb,EAAwB,MAAM;AAC5BJ,cAAUK,IAAV,CAAe,MAAf;AACD,GAFD;AAGAL,YAAUI,EAAV,CAAa,WAAb,EAA0B,MAAM;AAC9BN,MAAEQ,IAAF,CAAO,IAAP;AACAP,WAAOQ,KAAP;AACAT,MAAEU,GAAF;AACD,GAJD;;AAMAP,YAAUG,EAAV,CAAa,SAAb,EAAwB,MAAM;AAC5BH,cAAUI,IAAV,CAAe,MAAf;AACAJ,cAAUQ,EAAV,CAAa,MAAb,EAAqBC,IAArB,CAA0B,WAA1B;AACD,GAHD;AAID,CArBD","file":"server.test.js","sourcesContent":["import test                 from 'ava';\nimport { SocketIO, Server } from 'mock-socket';\nimport * as redis           from 'redis-mock';\nimport { GoServer }         from '../server';\n\n\n// const Server   = require('mock-socket').Server;\n// const SocketIO = require('mock-socket').SocketIO;\n\n// const GoServer = require('../server').GoServer;\n\n// test.cb('Server Unit Test', t => {\n//   // it('basic test', (done) => {\n//     const mockServer = new Server('http://localhost:8080');\n//     mockServer.on('connection', () => {\n//       mockServer.emit('messages', 'test message 1');\n//       mockServer.emit('messages', 'test message 2');\n//     });\n\n    \n//       This step is very important! It tells our server app to use the mocked\n//       websocket object instead of the native one. The great thing\n//       about this is that our actual code did not need to change and\n//       thus is agnostic to how we test it.\n    \n//     window.io = SocketIO;\n\n//     // Now when Go Server tries to do io() or io.connect()\n//     // it will use MockSocketIO object\n//     var app = new GoServer();\n\n//     setTimeout(() => {\n//       const messageLen = app.messages.length;\n//       // assert.equal(messageLen, 2, '2 messages where sent from the server');\n//       t.is(messageLen, 2);\n//       mockServer.stop(done);\n//       t.end();\n//     }, 100);\n//   // });\n// });\n\ntest.cb('a socket can emit to a room', t => {\n  const server = new Server('ws://roomy');\n  const socketFoo = SocketIO('ws://roomy');\n  const socketBar = SocketIO('ws://roomy');\n\n  // var redis = require('redis-mock'),\n  var  client = redis.createClient();\n\n  socketFoo.on('connect', () => {\n    socketFoo.join('room');\n  });\n  socketFoo.on('room-talk', () => {\n    t.true(true);\n    server.close();\n    t.end();\n  });\n\n  socketBar.on('connect', () => {\n    socketBar.join('room');\n    socketBar.to('room').emit('room-talk');\n  });\n});\n\n"]}